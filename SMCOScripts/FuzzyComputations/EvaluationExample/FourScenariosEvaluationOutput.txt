> #### Evaluation EXAMPLE STARTS HERE ####
> 
> ### Helper functions ###
> 
> # Helper function similar to the bindColums found in FuzzyAHP library, it binds FuzzyData
> # objects together into a single FuzzyData object by the rows
> bindRows <- function(data1, data2) {
+   fnMin = rbind(data1@fnMin, data2@fnMin)
+   fnModal = rbind(data1@fnModal, data2@fnModal)
+   fnMax = rbind(data1@fnMax, data2@fnMax)
+   
+   return(new("FuzzyData", fnMin = fnMin, fnModal = fnModal, fnMax = fnMax))
+ }
> 
> # Helper function that converts a FuzzyWeights class to a FuzzyData class
> convertFuzzyWeightsToFuzzyData <- function(fuzzyWeights) {
+   
+   for (fuzzyNumber in 1:length(fuzzyWeights@fnMin)){
+     # Extracting fnMin, fnModal and fnMax from FuzzyWeights
+     fnMinFuzzyWeights = matrix(fuzzyWeights@fnMin[c(fuzzyNumber)], nrow = 1, ncol = 1)
+     fnModalFuzzyWeights = matrix(fuzzyWeights@fnModal[c(fuzzyNumber)], nrow = 1, ncol = 1)
+     fnMaxFuzzyWeights = matrix(fuzzyWeights@fnMax[c(fuzzyNumber)], nrow = 1, ncol = 1)
+     
+     # Constructing the FuzzyData class
+     tmpFuzzyData <- new("FuzzyData", fnMin=fnMinFuzzyWeights, fnModal=fnModalFuzzyWeights, fnMax=fnMaxFuzzyWeights)
+     
+     if(fuzzyNumber > 1){
+       completeFuzzyData = bindRows(completeFuzzyData, tmpFuzzyData)
+     }
+     else {
+       completeFuzzyData = tmpFuzzyData
+     }
+   }
+   result <- completeFuzzyData
+ }
> 
> # Helper function that does the following:
> # 1. Creates a matrix from the received values
> # 2. Turns the matrix into a pairwise comparison matrix
> # 3. Fuzzyfying the pairwise comparison matrix
> # 4. Computing fuzzy weights for the fuzzy pairwise comparison matrix
> computeFuzzyWeightsForValues <- function(alternativeMatrixValues, nrOfRowsAndCol) {
+   # 1. Creates a matrix from the received values
+   newMatrix = matrix(alternativeMatrixValues, nrow = nrOfRowsAndCol, ncol = nrOfRowsAndCol, byrow = TRUE)
+   
+   # 2. Turns the matrix into a pairwise comparison matrix
+   newPairwiseComparisonMatrix = pairwiseComparisonMatrix(newMatrix)
+   
+   # Computing consistency ratio of the criteria pairwise comparison
+   #consistencyRatioValue = consistencyRatio(newPairwiseComparisonMatrix, print.report = TRUE)
+   #print(consistencyRatioValue)
+   
+   # 3. Fuzzyfying the pairwise comparison matrix
+   fuzzyPairwiseComparisonMatrix = fuzzyPairwiseComparisonMatrix(newPairwiseComparisonMatrix)
+   print(fuzzyPairwiseComparisonMatrix)
+   
+   # 4. Computing fuzzy weights for the fuzzy pairwise comparison matrix
+   fuzzyWeights = calculateWeights(fuzzyPairwiseComparisonMatrix)
+   print(fuzzyWeights)
+   result <- fuzzyWeights
+ }
> 
> ### Helper functions end here ###
> 
> 
> 
> ### AHP structure ###
> # Goal: Pick the best workflow configuration
> 
> # Criterias:
> #   C1 = Execution time
> #   C2 = Privacy
> #   C3 = Cost
> #   C4 = Network Bandwidth
> 
> # Alternatives:
> # Workflow 1:  (f1 @ C) (f2 @ C) (f3 @ C) (f4 @ C) (f5 @ C)
> # Workflow 2:  (f1 @ E) (f2 @ C) (f3 @ C) (f4 @ C) (f5 @ C)
> # Workflow 3:  (f1 @ C) (f2 @ C) (f3 @ C) (f4 @ C | f5 @ C)
> # Workflow 4:  (f1 @ E) (f2 @ C) (f3 @ C) (f4 @ C | f5 @ C)
> # Workflow 5:  (f1 @ C) (f2 @ C) (f3 @ C | f4 @ C) (f5 @ C)
> # Workflow 6:  (f1 @ E) (f2 @ C) (f3 @ C | f4 @ C) (f5 @ C)
> # Workflow 7:  (f1 @ C) (f2 @ C) (f3 @ C | f4 @ C | f5 @ C)
> # Workflow 8:  (f1 @ E) (f2 @ C) (f3 @ C | f4 @ C | f5 @ C)
> # Workflow 9:  (f1 @ C) (f2 @ C | f3 @ C) (f4 @ C) (f5 @ C)
> # Workflow 10: (f1 @ E) (f2 @ C | f3 @ C) (f4 @ C) (f5 @ C)
> # Workflow 11: (f1 @ C) (f2 @ C | f3 @ C) (f4 @ C | f5 @ C)
> # Workflow 12: (f1 @ E) (f2 @ C | f3 @ C) (f4 @ C | f5 @ C)
> # Workflow 13: (f1 @ C) (f2 @ C | f3 @ C | f4 @ C) (f5 @ C)
> # Workflow 14: (f1 @ E) (f2 @ C | f3 @ C | f4 @ C) (f5 @ C)
> # Workflow 15: (f1 @ C) (f2 @ C | f3 @ C | f4 @ C | f5 @ C)
> # Workflow 16: (f1 @ E) (f2 @ C | f3 @ C | f4 @ C | f5 @ C)
> # Workflow 17: (f1 @ C | f2 @ C) (f3 @ C) (f4 @ C) (f5 @ C)
> # Workflow 18: (f1 @ C | f2 @ C) (f3 @ C) (f4 @ C | f5 @ C)
> # Workflow 19: (f1 @ C | f2 @ C) (f3 @ C | f4 @ C) (f5 @ C)
> # Workflow 20: (f1 @ C | f2 @ C) (f3 @ C | f4 @ C | f5 @ C)
> # Workflow 21: (f1 @ C | f2 @ C | f3 @ C) (f4 @ C) (f5 @ C)
> # Workflow 22: (f1 @ C | f2 @ C | f3 @ C) (f4 @ C | f5 @ C)
> # Workflow 23: (f1 @ C | f2 @ C | f3 @ C | f4 @ C) (f5 @ C)
> # Workflow 24: (f1 @ C | f2 @ C | f3 @ C | f4 @ C | f5 @ C)
> 
> 
> ### Initialization ###
> 
> citation("FuzzyAHP")

Caha J, Drážná A (2019). _Information about FuzzyAHP package for R (ver.0.9.5)_. R package version 0.9.5, <URL: http://github.com/JanCaha/FuzzyAHP/>.

A BibTeX entry for LaTeX users is

  @Manual{,
    title = {Information about FuzzyAHP package for R (ver.0.9.5)},
    author = {Jan Caha and Aneta Drážná},
    year = {2019},
    note = {R package version 0.9.5},
    url = {http://github.com/JanCaha/FuzzyAHP/},
  }

> require(FuzzyAHP)
> 
> 
> # Pairwise comparison for the three different scenarios
> # Scenario 1: Focus on execution time
> scenarioOneCriteriaMatrixValues = c("1",   "7", "7", "7",
+                                     "1/7", "1", "1", "1",
+                                     "1/7", "1", "1", "1", 
+                                     "1/7", "1", "1", "1")
> 
> # Scenario 2: Focus on cost
> scenarioTwoCriteriaMatrixValues = c("1", "1", "1/7", "1",
+                                     "1", "1", "1/7", "1",
+                                     "7", "7", "1",   "7", 
+                                     "1", "1", "1/7", "1")
> 
> # Scenario 3: Focus on privacy
> scenarioThreeCriteriaMatrixValues = c("1", "1/7", "1", "1",
+                                       "7", "1", "7", "7",
+                                       "1", "1/7", "1", "1", 
+                                       "1", "1/7", "1", "1")
> 
> # Scenario 4: Focus on multiple criteria
> scenarioFourCriteriaMatrixValues = c("1",   "1",   "1",   "1",
+                                      "1",   "1",   "1",   "1",
+                                      "1",   "1",   "1",   "1", 
+                                      "1",   "1",   "1",   "1")
> 
> # Alternative pairwise comparison in respect to each criteria
> executionTimeComparisonMatrixValues = c("1", "1/8", "2", "1/6", "2", "1/6", "2", "1/6", "2", "1/6", "2", "1/6", "2", "1/6", "2", "1/6", "1", "2", "2", "2", "2", "2", "2", "2", 
+                                         "8", "1", "9", "2", "9", "2", "9", "2", "9", "2", "9", "2", "9", "2", "9", "2", "8", "9", "9", "9", "9", "9", "9", "9", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "6", "1/2", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "6", "8", "8", "8", "8", "8", "8", "8", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "6", "1/2", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "6", "8", "8", "8", "8", "8", "8", "8", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "6", "1/2", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "6", "8", "8", "8", "8", "8", "8", "8", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "6", "1/2", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "6", "8", "8", "8", "8", "8", "8", "8", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "6", "1/2", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "6", "8", "8", "8", "8", "8", "8", "8", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "6", "1/2", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "6", "8", "8", "8", "8", "8", "8", "8", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "6", "1/2", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "8", "1", "6", "8", "8", "8", "8", "8", "8", "8", 
+                                         "1", "1/8", "2", "1/6", "2", "1/6", "2", "1/6", "2", "1/6", "2", "1/6", "2", "1/6", "2", "1/6", "1", "2", "2", "2", "2", "2", "2", "2", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1", 
+                                         "1/2", "1/9", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1", "1/8", "1/2", "1", "1", "1", "1", "1", "1", "1")
> 
> privacyComparisonMatrixValues = c("1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "9", "9", "9", "9", "9", "9", "9", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "9", "9", "9", "9", "9", "9", "9", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "9", "9", "9", "9", "9", "9", "9", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "9", "9", "9", "9", "9", "9", "9", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "9", "9", "9", "9", "9", "9", "9", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "9", "9", "9", "9", "9", "9", "9", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "9", "9", "9", "9", "9", "9", "9", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "1", "9", "9", "9", "9", "9", "9", "9", "9", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                   "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1/9", "1", "1", "1", "1", "1", "1", "1", "1")
> 
> costComparisonMatrixValues = c("1", "1/4", "1/2", "1/6", "1/2", "1/6", "1/4", "1/8", "1/2", "1/6", "1/4", "1/8", "1/4", "1/8", "1/6", "1/9", "1/2", "1/4", "1/4", "1/6", "1/4", "1/6", "1/6", "1/8", 
+                                "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "2", "1", "1", "1/2", "1", "1/2", "1/2", "1/4", 
+                                "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "1", "1/4", "1/2", "1/6", "1/2", "1/6", "1/4", "1/8", "1", "1/2", "1/2", "1/4", "1/2", "1/4", "1/4", "1/6", 
+                                "6", "2", "4", "1", "4", "1", "2", "1/2", "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "4", "2", "2", "1", "2", "1", "1", "1/2", 
+                                "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "1", "1/4", "1/2", "1/6", "1/2", "1/6", "1/4", "1/8", "1", "1/2", "1/2", "1/4", "1/2", "1/4", "1/4", "1/6", 
+                                "6", "2", "4", "1", "4", "1", "2", "1/2", "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "4", "2", "2", "1", "2", "1", "1", "1/2", 
+                                "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "2", "1", "1", "1/2", "1", "1/2", "1/2", "1/4", 
+                                "8", "4", "6", "2", "6", "2", "4", "1", "6", "2", "4", "1", "4", "1", "2", "1/2", "6", "4", "4", "2", "4", "2", "2", "1", 
+                                "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "1", "1/4", "1/2", "1/6", "1/2", "1/6", "1/4", "1/8", "1", "1/2", "1/2", "1/4", "1/2", "1/4", "1/4", "1/6", 
+                                "6", "2", "4", "1", "4", "1", "2", "1/2", "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "4", "2", "2", "1", "2", "1", "1", "1/2", 
+                                "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "2", "1", "1", "1/2", "1", "1/2", "1/2", "1/4", 
+                                "8", "4", "6", "2", "6", "2", "4", "1", "6", "2", "4", "1", "4", "1", "2", "1/2", "6", "4", "4", "2", "4", "2", "2", "1", 
+                                "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "2", "1", "1", "1/2", "1", "1/2", "1/2", "1/4", 
+                                "8", "4", "6", "2", "6", "2", "4", "1", "6", "2", "4", "1", "4", "1", "2", "1/2", "6", "4", "4", "2", "4", "2", "2", "1", 
+                                "6", "2", "4", "1", "4", "1", "2", "1/2", "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "4", "2", "2", "1", "2", "1", "1", "1/2", 
+                                "9", "6", "8", "4", "8", "4", "6", "2", "8", "4", "6", "2", "6", "2", "4", "1", "8", "6", "6", "4", "6", "4", "4", "2", 
+                                "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "1", "1/4", "1/2", "1/6", "1/2", "1/6", "1/4", "1/8", "1", "1/2", "1/2", "1/4", "1/2", "1/4", "1/4", "1/6", 
+                                "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "2", "1", "1", "1/2", "1", "1/2", "1/2", "1/4", 
+                                "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "2", "1", "1", "1/2", "1", "1/2", "1/2", "1/4", 
+                                "6", "2", "4", "1", "4", "1", "2", "1/2", "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "4", "2", "2", "1", "2", "1", "1", "1/2", 
+                                "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "2", "1/2", "1", "1/4", "1", "1/4", "1/2", "1/6", "2", "1", "1", "1/2", "1", "1/2", "1/2", "1/4", 
+                                "6", "2", "4", "1", "4", "1", "2", "1/2", "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "4", "2", "2", "1", "2", "1", "1", "1/2", 
+                                "6", "2", "4", "1", "4", "1", "2", "1/2", "4", "1", "2", "1/2", "2", "1/2", "1", "1/4", "4", "2", "2", "1", "2", "1", "1", "1/2", 
+                                "8", "4", "6", "2", "6", "2", "4", "1", "6", "2", "4", "1", "4", "1", "2", "1/2", "6", "4", "4", "2", "4", "2", "2", "1")
> 
> networkBandwidthComparisonMatrixValues = c("1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
+                                            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1")
> 
> 
> ### Computing weights ###
> # Computing criteria weights
> scenarioOneFuzzyCriteriaWeights = computeFuzzyWeightsForValues(scenarioOneCriteriaMatrixValues, 4)
              C_1       C_2       C_3       C_4
C_1       (1;1;1)   (6;7;8)   (6;7;8)   (6;7;8)
C_2 (1/8;1/7;1/6)   (1;1;1) (1/2;1;2) (1/2;1;2)
C_3 (1/8;1/7;1/6) (1/2;1;2)   (1;1;1) (1/2;1;2)
C_4 (1/8;1/7;1/6) (1/2;1;2) (1/2;1;2)   (1;1;1)
   [,1]                 
w1 "(0.6578;0.7;0.7193)"
w2 "(0.0636;0.1;0.155)" 
w3 "(0.0636;0.1;0.155)" 
w4 "(0.0636;0.1;0.155)" 
> scenarioTwoFuzzyCriteriaWeights = computeFuzzyWeightsForValues(scenarioTwoCriteriaMatrixValues, 4)
          C_1       C_2           C_3       C_4
C_1   (1;1;1) (1/2;1;2) (1/8;1/7;1/6) (1/2;1;2)
C_2 (1/2;1;2)   (1;1;1) (1/8;1/7;1/6) (1/2;1;2)
C_3   (6;7;8)   (6;7;8)       (1;1;1)   (6;7;8)
C_4 (1/2;1;2) (1/2;1;2) (1/8;1/7;1/6)   (1;1;1)
   [,1]                 
w1 "(0.0663;0.1;0.1486)"
w2 "(0.0663;0.1;0.1486)"
w3 "(0.6578;0.7;0.7193)"
w4 "(0.0636;0.1;0.155)" 
> scenarioThreeFuzzyCriteriaWeights = computeFuzzyWeightsForValues(scenarioThreeCriteriaMatrixValues, 4)
          C_1           C_2       C_3       C_4
C_1   (1;1;1) (1/8;1/7;1/6) (1/2;1;2) (1/2;1;2)
C_2   (6;7;8)       (1;1;1)   (6;7;8)   (6;7;8)
C_3 (1/2;1;2) (1/8;1/7;1/6)   (1;1;1) (1/2;1;2)
C_4 (1/2;1;2) (1/8;1/7;1/6) (1/2;1;2)   (1;1;1)
   [,1]                 
w1 "(0.0636;0.1;0.155)" 
w2 "(0.6578;0.7;0.7193)"
w3 "(0.0663;0.1;0.1486)"
w4 "(0.0663;0.1;0.1486)"
> scenarioFourFuzzyCriteriaWeights = computeFuzzyWeightsForValues(scenarioFourCriteriaMatrixValues, 4)
          C_1       C_2       C_3       C_4
C_1   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_2 (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2)
C_3 (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2)
C_4 (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1)
   [,1]                  
w1 "(0.1381;0.25;0.3905)"
w2 "(0.1381;0.25;0.3905)"
w3 "(0.1381;0.25;0.3905)"
w4 "(0.1381;0.25;0.3905)"
> 
> 
> 
> # Computing alternative weights
> fuzzyExecutionTimeWeights = computeFuzzyWeightsForValues(executionTimeComparisonMatrixValues, 24)
             C_1           C_2       C_3           C_4       C_5           C_6       C_7           C_8       C_9          C_10      C_11          C_12      C_13          C_14      C_15          C_16        C_17
C_1      (1;1;1) (1/9;1/8;1/7)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1/2;1;2)
C_2      (7;8;9)       (1;1;1)   (8;9;9)       (1;2;3)   (8;9;9)       (1;2;3)   (8;9;9)       (1;2;3)   (8;9;9)       (1;2;3)   (8;9;9)       (1;2;3)   (8;9;9)       (1;2;3)   (8;9;9)       (1;2;3)     (7;8;9)
C_3  (1/3;1/2;1) (1/9;1/9;1/8)   (1;1;1) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_4      (5;6;7)   (1/3;1/2;1)   (7;8;9)       (1;1;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)     (5;6;7)
C_5  (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7)   (1;1;1) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_6      (5;6;7)   (1/3;1/2;1)   (7;8;9)     (1/2;1;2)   (7;8;9)       (1;1;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)     (5;6;7)
C_7  (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7)   (1;1;1) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_8      (5;6;7)   (1/3;1/2;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)       (1;1;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)     (5;6;7)
C_9  (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7)   (1;1;1) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_10     (5;6;7)   (1/3;1/2;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)       (1;1;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)     (5;6;7)
C_11 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7)   (1;1;1) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_12     (5;6;7)   (1/3;1/2;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)       (1;1;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)     (5;6;7)
C_13 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7)   (1;1;1) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_14     (5;6;7)   (1/3;1/2;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)       (1;1;1)   (7;8;9)     (1/2;1;2)     (5;6;7)
C_15 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7)   (1;1;1) (1/9;1/8;1/7) (1/3;1/2;1)
C_16     (5;6;7)   (1/3;1/2;1)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)     (1/2;1;2)   (7;8;9)       (1;1;1)     (5;6;7)
C_17   (1/2;1;2) (1/9;1/8;1/7)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)   (1;2;3) (1/7;1/6;1/5)     (1;1;1)
C_18 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_19 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_20 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_21 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_22 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_23 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
C_24 (1/3;1/2;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/2;1;2) (1/9;1/8;1/7) (1/3;1/2;1)
          C_18      C_19      C_20      C_21      C_22      C_23      C_24
C_1    (1;2;3)   (1;2;3)   (1;2;3)   (1;2;3)   (1;2;3)   (1;2;3)   (1;2;3)
C_2    (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)
C_3  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_4    (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)
C_5  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_6    (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)
C_7  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_8    (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)
C_9  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_10   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)
C_11 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_12   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)
C_13 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_14   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)
C_15 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_16   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)   (7;8;9)
C_17   (1;2;3)   (1;2;3)   (1;2;3)   (1;2;3)   (1;2;3)   (1;2;3)   (1;2;3)
C_18   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_19 (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_20 (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_21 (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_22 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2)
C_23 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2)
C_24 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1)
    [,1]                    
w1  "(0.0121;0.0204;0.0289)"
w2  "(0.097;0.1311;0.1495)" 
w3  "(0.0072;0.0117;0.0195)"
w4  "(0.0697;0.0948;0.1269)"
w5  "(0.0072;0.0117;0.0195)"
w6  "(0.0697;0.0948;0.127)" 
w7  "(0.0072;0.0117;0.0194)"
w8  "(0.0696;0.0948;0.1271)"
w9  "(0.0073;0.0117;0.0194)"
w10 "(0.0695;0.0948;0.1272)"
w11 "(0.0073;0.0117;0.0194)"
w12 "(0.0695;0.0948;0.1273)"
w13 "(0.0073;0.0117;0.0194)"
w14 "(0.0694;0.0948;0.1274)"
w15 "(0.0073;0.0117;0.0194)"
w16 "(0.0694;0.0948;0.1276)"
w17 "(0.0122;0.0204;0.0287)"
w18 "(0.0073;0.0117;0.0193)"
w19 "(0.0073;0.0117;0.0193)"
w20 "(0.0073;0.0117;0.0193)"
w21 "(0.0073;0.0117;0.0193)"
w22 "(0.0073;0.0117;0.0193)"
w23 "(0.0073;0.0117;0.0193)"
w24 "(0.0073;0.0117;0.0193)"
> fuzzyPrivacyWeights = computeFuzzyWeightsForValues(privacyComparisonMatrixValues, 24)
           C_1           C_2       C_3           C_4       C_5           C_6       C_7           C_8       C_9          C_10      C_11          C_12      C_13          C_14      C_15          C_16      C_17      C_18
C_1    (1;1;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_2    (8;9;9)       (1;1;1)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)   (8;9;9)
C_3  (1/2;1;2) (1/9;1/9;1/8)   (1;1;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_4    (8;9;9)     (1/2;1;2)   (8;9;9)       (1;1;1)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)   (8;9;9)
C_5  (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8)   (1;1;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_6    (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)       (1;1;1)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)   (8;9;9)
C_7  (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8)   (1;1;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_8    (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)       (1;1;1)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)   (8;9;9)
C_9  (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8)   (1;1;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_10   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)       (1;1;1)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)   (8;9;9)
C_11 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8)   (1;1;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_12   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)       (1;1;1)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)   (8;9;9)
C_13 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8)   (1;1;1) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_14   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)       (1;1;1)   (8;9;9)     (1/2;1;2)   (8;9;9)   (8;9;9)
C_15 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8)   (1;1;1) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_16   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)     (1/2;1;2)   (8;9;9)       (1;1;1)   (8;9;9)   (8;9;9)
C_17 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8)   (1;1;1) (1/2;1;2)
C_18 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2)   (1;1;1)
C_19 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_20 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_21 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_22 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_23 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
C_24 (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/9;1/9;1/8) (1/2;1;2) (1/2;1;2)
          C_19      C_20      C_21      C_22      C_23      C_24
C_1  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_2    (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)
C_3  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_4    (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)
C_5  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_6    (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)
C_7  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_8    (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)
C_9  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_10   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)
C_11 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_12   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)
C_13 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_14   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)
C_15 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_16   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)   (8;9;9)
C_17 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_18 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_19   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_20 (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_21 (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_22 (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2)
C_23 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2)
C_24 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1)
    [,1]                    
w1  "(0.0073;0.0114;0.0187)"
w2  "(0.0777;0.1023;0.1274)"
w3  "(0.0073;0.0114;0.0187)"
w4  "(0.0777;0.1023;0.1274)"
w5  "(0.0074;0.0114;0.0187)"
w6  "(0.0776;0.1023;0.1275)"
w7  "(0.0074;0.0114;0.0187)"
w8  "(0.0776;0.1023;0.1275)"
w9  "(0.0074;0.0114;0.0187)"
w10 "(0.0776;0.1023;0.1276)"
w11 "(0.0074;0.0114;0.0187)"
w12 "(0.0775;0.1023;0.1276)"
w13 "(0.0074;0.0114;0.0187)"
w14 "(0.0775;0.1023;0.1277)"
w15 "(0.0074;0.0114;0.0187)"
w16 "(0.0775;0.1023;0.1278)"
w17 "(0.0074;0.0114;0.0187)"
w18 "(0.0074;0.0114;0.0187)"
w19 "(0.0074;0.0114;0.0187)"
w20 "(0.0074;0.0114;0.0187)"
w21 "(0.0074;0.0114;0.0187)"
w22 "(0.0074;0.0114;0.0187)"
w23 "(0.0074;0.0114;0.0187)"
w24 "(0.0074;0.0114;0.0187)"
> fuzzyCostWeights = computeFuzzyWeightsForValues(costComparisonMatrixValues, 24)
         C_1           C_2         C_3           C_4         C_5           C_6           C_7           C_8         C_9          C_10          C_11          C_12          C_13          C_14          C_15          C_16
C_1  (1;1;1) (1/5;1/4;1/3) (1/3;1/2;1) (1/7;1/6;1/5) (1/3;1/2;1) (1/7;1/6;1/5) (1/5;1/4;1/3) (1/9;1/8;1/7) (1/3;1/2;1) (1/7;1/6;1/5) (1/5;1/4;1/3) (1/9;1/8;1/7) (1/5;1/4;1/3) (1/9;1/8;1/7) (1/7;1/6;1/5) (1/9;1/9;1/8)
C_2  (3;4;5)       (1;1;1)     (1;2;3)   (1/3;1/2;1)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)
C_3  (1;2;3)   (1/3;1/2;1)     (1;1;1) (1/5;1/4;1/3)   (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)   (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)   (1/3;1/2;1) (1/7;1/6;1/5) (1/5;1/4;1/3) (1/9;1/8;1/7)
C_4  (5;6;7)       (1;2;3)     (3;4;5)       (1;1;1)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)       (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)
C_5  (1;2;3)   (1/3;1/2;1)   (1/2;1;2) (1/5;1/4;1/3)     (1;1;1) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)   (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)   (1/3;1/2;1) (1/7;1/6;1/5) (1/5;1/4;1/3) (1/9;1/8;1/7)
C_6  (5;6;7)       (1;2;3)     (3;4;5)     (1/2;1;2)     (3;4;5)       (1;1;1)       (1;2;3)   (1/3;1/2;1)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)       (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)
C_7  (3;4;5)     (1/2;1;2)     (1;2;3)   (1/3;1/2;1)     (1;2;3)   (1/3;1/2;1)       (1;1;1) (1/5;1/4;1/3)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)
C_8  (7;8;9)       (3;4;5)     (5;6;7)       (1;2;3)     (5;6;7)       (1;2;3)       (3;4;5)       (1;1;1)     (5;6;7)       (1;2;3)       (3;4;5)     (1/2;1;2)       (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)
C_9  (1;2;3)   (1/3;1/2;1)   (1/2;1;2) (1/5;1/4;1/3)   (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)     (1;1;1) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)   (1/3;1/2;1) (1/7;1/6;1/5) (1/5;1/4;1/3) (1/9;1/8;1/7)
C_10 (5;6;7)       (1;2;3)     (3;4;5)     (1/2;1;2)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)     (3;4;5)       (1;1;1)       (1;2;3)   (1/3;1/2;1)       (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)
C_11 (3;4;5)     (1/2;1;2)     (1;2;3)   (1/3;1/2;1)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1;2;3)   (1/3;1/2;1)       (1;1;1) (1/5;1/4;1/3)     (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)
C_12 (7;8;9)       (3;4;5)     (5;6;7)       (1;2;3)     (5;6;7)       (1;2;3)       (3;4;5)     (1/2;1;2)     (5;6;7)       (1;2;3)       (3;4;5)       (1;1;1)       (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)
C_13 (3;4;5)     (1/2;1;2)     (1;2;3)   (1/3;1/2;1)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)       (1;1;1) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)
C_14 (7;8;9)       (3;4;5)     (5;6;7)       (1;2;3)     (5;6;7)       (1;2;3)       (3;4;5)     (1/2;1;2)     (5;6;7)       (1;2;3)       (3;4;5)     (1/2;1;2)       (3;4;5)       (1;1;1)       (1;2;3)   (1/3;1/2;1)
C_15 (5;6;7)       (1;2;3)     (3;4;5)     (1/2;1;2)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)       (1;2;3)   (1/3;1/2;1)       (1;1;1) (1/5;1/4;1/3)
C_16 (8;9;9)       (5;6;7)     (7;8;9)       (3;4;5)     (7;8;9)       (3;4;5)       (5;6;7)       (1;2;3)     (7;8;9)       (3;4;5)       (5;6;7)       (1;2;3)       (5;6;7)       (1;2;3)       (3;4;5)       (1;1;1)
C_17 (1;2;3)   (1/3;1/2;1)   (1/2;1;2) (1/5;1/4;1/3)   (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)   (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)   (1/3;1/2;1) (1/7;1/6;1/5) (1/5;1/4;1/3) (1/9;1/8;1/7)
C_18 (3;4;5)     (1/2;1;2)     (1;2;3)   (1/3;1/2;1)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)
C_19 (3;4;5)     (1/2;1;2)     (1;2;3)   (1/3;1/2;1)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)
C_20 (5;6;7)       (1;2;3)     (3;4;5)     (1/2;1;2)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)       (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)
C_21 (3;4;5)     (1/2;1;2)     (1;2;3)   (1/3;1/2;1)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)     (1/2;1;2) (1/5;1/4;1/3)   (1/3;1/2;1) (1/7;1/6;1/5)
C_22 (5;6;7)       (1;2;3)     (3;4;5)     (1/2;1;2)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)       (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)
C_23 (5;6;7)       (1;2;3)     (3;4;5)     (1/2;1;2)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)     (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)       (1;2;3)   (1/3;1/2;1)     (1/2;1;2) (1/5;1/4;1/3)
C_24 (7;8;9)       (3;4;5)     (5;6;7)       (1;2;3)     (5;6;7)       (1;2;3)       (3;4;5)     (1/2;1;2)     (5;6;7)       (1;2;3)       (3;4;5)     (1/2;1;2)       (3;4;5)     (1/2;1;2)       (1;2;3)   (1/3;1/2;1)
            C_17          C_18          C_19          C_20          C_21          C_22          C_23          C_24
C_1  (1/3;1/2;1) (1/5;1/4;1/3) (1/5;1/4;1/3) (1/7;1/6;1/5) (1/5;1/4;1/3) (1/7;1/6;1/5) (1/7;1/6;1/5) (1/9;1/8;1/7)
C_2      (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)     (1/2;1;2)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)
C_3    (1/2;1;2)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)   (1/3;1/2;1) (1/5;1/4;1/3) (1/5;1/4;1/3) (1/7;1/6;1/5)
C_4      (3;4;5)       (1;2;3)       (1;2;3)     (1/2;1;2)       (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)
C_5    (1/2;1;2)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)   (1/3;1/2;1) (1/5;1/4;1/3) (1/5;1/4;1/3) (1/7;1/6;1/5)
C_6      (3;4;5)       (1;2;3)       (1;2;3)     (1/2;1;2)       (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)
C_7      (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)     (1/2;1;2)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)
C_8      (5;6;7)       (3;4;5)       (3;4;5)       (1;2;3)       (3;4;5)       (1;2;3)       (1;2;3)     (1/2;1;2)
C_9    (1/2;1;2)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)   (1/3;1/2;1) (1/5;1/4;1/3) (1/5;1/4;1/3) (1/7;1/6;1/5)
C_10     (3;4;5)       (1;2;3)       (1;2;3)     (1/2;1;2)       (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)
C_11     (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)     (1/2;1;2)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)
C_12     (5;6;7)       (3;4;5)       (3;4;5)       (1;2;3)       (3;4;5)       (1;2;3)       (1;2;3)     (1/2;1;2)
C_13     (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)     (1/2;1;2)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)
C_14     (5;6;7)       (3;4;5)       (3;4;5)       (1;2;3)       (3;4;5)       (1;2;3)       (1;2;3)     (1/2;1;2)
C_15     (3;4;5)       (1;2;3)       (1;2;3)     (1/2;1;2)       (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)
C_16     (7;8;9)       (5;6;7)       (5;6;7)       (3;4;5)       (5;6;7)       (3;4;5)       (3;4;5)       (1;2;3)
C_17     (1;1;1)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)   (1/3;1/2;1) (1/5;1/4;1/3) (1/5;1/4;1/3) (1/7;1/6;1/5)
C_18     (1;2;3)       (1;1;1)     (1/2;1;2)   (1/3;1/2;1)     (1/2;1;2)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)
C_19     (1;2;3)     (1/2;1;2)       (1;1;1)   (1/3;1/2;1)     (1/2;1;2)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)
C_20     (3;4;5)       (1;2;3)       (1;2;3)       (1;1;1)       (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)
C_21     (1;2;3)     (1/2;1;2)     (1/2;1;2)   (1/3;1/2;1)       (1;1;1)   (1/3;1/2;1)   (1/3;1/2;1) (1/5;1/4;1/3)
C_22     (3;4;5)       (1;2;3)       (1;2;3)     (1/2;1;2)       (1;2;3)       (1;1;1)     (1/2;1;2)   (1/3;1/2;1)
C_23     (3;4;5)       (1;2;3)       (1;2;3)     (1/2;1;2)       (1;2;3)     (1/2;1;2)       (1;1;1)   (1/3;1/2;1)
C_24     (5;6;7)       (3;4;5)       (3;4;5)       (1;2;3)       (3;4;5)       (1;2;3)       (1;2;3)       (1;1;1)
    [,1]                    
w1  "(0.0057;0.0072;0.0098)"
w2  "(0.0138;0.0228;0.0386)"
w3  "(0.0084;0.0122;0.019)" 
w4  "(0.0258;0.0445;0.0719)"
w5  "(0.0084;0.0122;0.019)" 
w6  "(0.0258;0.0445;0.0718)"
w7  "(0.0138;0.0228;0.0387)"
w8  "(0.0527;0.0834;0.1171)"
w9  "(0.0084;0.0122;0.0191)"
w10 "(0.0258;0.0445;0.0718)"
w11 "(0.0138;0.0228;0.0388)"
w12 "(0.0529;0.0834;0.1166)"
w13 "(0.0138;0.0228;0.0388)"
w14 "(0.053;0.0834;0.1164)" 
w15 "(0.0258;0.0445;0.0719)"
w16 "(0.1042;0.1399;0.1693)"
w17 "(0.0084;0.0122;0.0192)"
w18 "(0.0137;0.0228;0.0389)"
w19 "(0.0137;0.0228;0.0389)"
w20 "(0.0258;0.0445;0.0719)"
w21 "(0.0137;0.0228;0.039)" 
w22 "(0.0258;0.0445;0.0719)"
w23 "(0.0258;0.0445;0.0719)"
w24 "(0.0535;0.0834;0.1156)"
> fuzzyNetworkBandwidthWeights = computeFuzzyWeightsForValues(networkBandwidthComparisonMatrixValues, 24)
           C_1       C_2       C_3       C_4       C_5       C_6       C_7       C_8       C_9      C_10      C_11      C_12      C_13      C_14      C_15      C_16      C_17      C_18      C_19      C_20      C_21
C_1    (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_2  (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_3  (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_4  (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_5  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_6  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_7  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_8  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_9  (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_10 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_11 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_12 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_13 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_14 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_15 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_16 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_17 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_18 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_19 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2) (1/2;1;2)
C_20 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1) (1/2;1;2)
C_21 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)   (1;1;1)
C_22 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_23 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_24 (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2) (1/2;1;2)
          C_22      C_23      C_24
C_1  (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_2  (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_3  (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_4  (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_5  (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_6  (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_7  (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_8  (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_9  (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_10 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_11 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_12 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_13 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_14 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_15 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_16 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_17 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_18 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_19 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_20 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_21 (1/2;1;2) (1/2;1;2) (1/2;1;2)
C_22   (1;1;1) (1/2;1;2) (1/2;1;2)
C_23 (1/2;1;2)   (1;1;1) (1/2;1;2)
C_24 (1/2;1;2) (1/2;1;2)   (1;1;1)
    [,1]                    
w1  "(0.0198;0.0417;0.0748)"
w2  "(0.0198;0.0417;0.0748)"
w3  "(0.0198;0.0417;0.0748)"
w4  "(0.0198;0.0417;0.0748)"
w5  "(0.0198;0.0417;0.0748)"
w6  "(0.0198;0.0417;0.0748)"
w7  "(0.0198;0.0417;0.0748)"
w8  "(0.0198;0.0417;0.0748)"
w9  "(0.0198;0.0417;0.0748)"
w10 "(0.0198;0.0417;0.0748)"
w11 "(0.0198;0.0417;0.0748)"
w12 "(0.0198;0.0417;0.0748)"
w13 "(0.0198;0.0417;0.0748)"
w14 "(0.0198;0.0417;0.0748)"
w15 "(0.0198;0.0417;0.0748)"
w16 "(0.0198;0.0417;0.0748)"
w17 "(0.0198;0.0417;0.0748)"
w18 "(0.0198;0.0417;0.0748)"
w19 "(0.0198;0.0417;0.0748)"
w20 "(0.0198;0.0417;0.0748)"
w21 "(0.0198;0.0417;0.0748)"
w22 "(0.0198;0.0417;0.0748)"
w23 "(0.0198;0.0417;0.0748)"
w24 "(0.0198;0.0417;0.0748)"
> 
> # Fuzzy weights are converted to Fuzzy data
> fuzzyExecutionTimeData = convertFuzzyWeightsToFuzzyData(fuzzyExecutionTimeWeights)
> fuzzyPrivacyData = convertFuzzyWeightsToFuzzyData(fuzzyPrivacyWeights)
> fuzzyCostData = convertFuzzyWeightsToFuzzyData(fuzzyCostWeights)
> fuzzyNetworkBandwidthData = convertFuzzyWeightsToFuzzyData(fuzzyNetworkBandwidthWeights)
> 
> # Merging the weights together before the final computations
> data = bindColums(fuzzyExecutionTimeData, fuzzyPrivacyData)
> data = bindColums(data, fuzzyCostData)
> data = bindColums(data, fuzzyNetworkBandwidthData)
> 
> scenarioOneResult = calculateAHP(scenarioOneFuzzyCriteriaWeights, data)
> scenarioTwoResult = calculateAHP(scenarioTwoFuzzyCriteriaWeights, data)
> scenarioThreeResult = calculateAHP(scenarioThreeFuzzyCriteriaWeights, data)
> scenarioFourResult = calculateAHP(scenarioFourFuzzyCriteriaWeights, data)
> 
> print(scenarioOneResult)
      [,1]                    
 [1,] "(0.01;0.0203;0.0368)"  
 [2,] "(0.0709;0.1084;0.1449)"
 [3,] "(0.007;0.0147;0.0315)" 
 [4,] "(0.0537;0.0852;0.1338)"
 [5,] "(0.007;0.0147;0.0314)" 
 [6,] "(0.0537;0.0852;0.1339)"
 [7,] "(0.0074;0.0158;0.0345)"
 [8,] "(0.0553;0.0891;0.141)" 
 [9,] "(0.007;0.0147;0.0314)" 
[10,] "(0.0536;0.0852;0.134)" 
[11,] "(0.0074;0.0158;0.0345)"
[12,] "(0.0553;0.0891;0.1411)"
[13,] "(0.0074;0.0158;0.0345)"
[14,] "(0.0552;0.0891;0.1411)"
[15,] "(0.0081;0.018;0.0396)" 
[16,] "(0.0584;0.0948;0.1494)"
[17,] "(0.0103;0.0208;0.0381)"
[18,] "(0.0074;0.0158;0.0344)"
[19,] "(0.0074;0.0158;0.0344)"
[20,] "(0.0082;0.018;0.0396)" 
[21,] "(0.0074;0.0158;0.0344)"
[22,] "(0.0082;0.018;0.0395)" 
[23,] "(0.0082;0.018;0.0395)" 
[24,] "(0.0099;0.0219;0.0463)"
> print(scenarioTwoResult)
      [,1]                    
 [1,] "(0.0063;0.0124;0.0257)"
 [2,] "(0.0219;0.0434;0.0805)"
 [3,] "(0.0078;0.015;0.0309)" 
 [4,] "(0.028;0.055;0.1011)"  
 [5,] "(0.0078;0.015;0.031)"  
 [6,] "(0.028;0.055;0.1011)"  
 [7,] "(0.0113;0.0224;0.0451)"
 [8,] "(0.0457;0.0822;0.1336)"
 [9,] "(0.0077;0.015;0.031)"  
[10,] "(0.028;0.055;0.1011)"  
[11,] "(0.0113;0.0224;0.0451)"
[12,] "(0.0458;0.0822;0.1333)"
[13,] "(0.0113;0.0224;0.0452)"
[14,] "(0.0458;0.0822;0.1333)"
[15,] "(0.0192;0.0376;0.069)" 
[16,] "(0.0795;0.1218;0.1713)"
[17,] "(0.008;0.0158;0.0324)" 
[18,] "(0.0113;0.0224;0.0453)"
[19,] "(0.0113;0.0224;0.0453)"
[20,] "(0.0192;0.0376;0.069)" 
[21,] "(0.0112;0.0224;0.0453)"
[22,] "(0.0192;0.0376;0.0689)"
[23,] "(0.0192;0.0376;0.0689)"
[24,] "(0.0374;0.0648;0.1004)"
> print(scenarioThreeResult)
      [,1]                    
 [1,] "(0.0073;0.0149;0.0305)"
 [2,] "(0.0595;0.0911;0.1317)"
 [3,] "(0.0072;0.0145;0.0304)"
 [4,] "(0.0586;0.0897;0.1331)"
 [5,] "(0.0072;0.0145;0.0304)"
 [6,] "(0.0585;0.0897;0.1332)"
 [7,] "(0.0075;0.0156;0.0333)"
 [8,] "(0.0603;0.0936;0.1399)"
 [9,] "(0.0072;0.0145;0.0304)"
[10,] "(0.0585;0.0897;0.1333)"
[11,] "(0.0075;0.0156;0.0333)"
[12,] "(0.0602;0.0936;0.14)"  
[13,] "(0.0075;0.0156;0.0333)"
[14,] "(0.0602;0.0936;0.14)"  
[15,] "(0.0083;0.0177;0.0383)"
[16,] "(0.0636;0.0992;0.1479)"
[17,] "(0.0075;0.0154;0.0319)"
[18,] "(0.0075;0.0156;0.0333)"
[19,] "(0.0075;0.0156;0.0333)"
[20,] "(0.0083;0.0177;0.0382)"
[21,] "(0.0075;0.0156;0.0333)"
[22,] "(0.0083;0.0177;0.0382)"
[23,] "(0.0083;0.0177;0.0382)"
[24,] "(0.0102;0.0216;0.0447)"
> print(scenarioFourResult)
      [,1]                    
 [1,] "(0.0062;0.0202;0.0517)"
 [2,] "(0.0288;0.0745;0.1525)"
 [3,] "(0.0059;0.0192;0.0516)"
 [4,] "(0.0266;0.0708;0.1566)"
 [5,] "(0.0059;0.0192;0.0516)"
 [6,] "(0.0266;0.0708;0.1567)"
 [7,] "(0.0067;0.0219;0.0592)"
 [8,] "(0.0303;0.0805;0.1744)"
 [9,] "(0.0059;0.0192;0.0516)"
[10,] "(0.0266;0.0708;0.1568)"
[11,] "(0.0067;0.0219;0.0592)"
[12,] "(0.0303;0.0805;0.1743)"
[13,] "(0.0067;0.0219;0.0593)"
[14,] "(0.0303;0.0805;0.1743)"
[15,] "(0.0083;0.0273;0.0722)"
[16,] "(0.0374;0.0947;0.195)" 
[17,] "(0.0066;0.0214;0.0552)"
[18,] "(0.0067;0.0219;0.0593)"
[19,] "(0.0067;0.0219;0.0593)"
[20,] "(0.0083;0.0273;0.0722)"
[21,] "(0.0067;0.0219;0.0593)"
[22,] "(0.0083;0.0273;0.0721)"
[23,] "(0.0083;0.0273;0.0721)"
[24,] "(0.0121;0.037;0.0892)" 
> 
> # Defuzzyfy before ranking
> scenarioOneDefuzzified = defuzziffy(scenarioOneResult, "Yager")
> scenarioTwoDefuzzified = defuzziffy(scenarioTwoResult, "Yager")
> scenarioThreeDefuzzified = defuzziffy(scenarioThreeResult, "Yager")
> scenarioFourDefuzzified = defuzziffy(scenarioFourResult, "Yager")
> 
> print(scenarioOneDefuzzified)
            [,1]
 [1,] 0.02237955
 [2,] 0.10806894
 [3,] 0.01773718
 [4,] 0.09090916
 [5,] 0.01773603
 [6,] 0.09091383
 [7,] 0.01921790
 [8,] 0.09513047
 [9,] 0.01773321
[10,] 0.09093812
[11,] 0.01921550
[12,] 0.09513935
[13,] 0.01921420
[14,] 0.09515321
[15,] 0.02189891
[16,] 0.10087568
[17,] 0.02305087
[18,] 0.01920987
[19,] 0.01920987
[20,] 0.02189279
[21,] 0.01921103
[22,] 0.02189092
[23,] 0.02189092
[24,] 0.02603727
> print(scenarioTwoDefuzzified)
            [,1]
 [1,] 0.01481253
 [2,] 0.04863042
 [3,] 0.01789648
 [4,] 0.06136863
 [5,] 0.01789976
 [6,] 0.06135859
 [7,] 0.02627308
 [8,] 0.08719444
 [9,] 0.01790814
[10,] 0.06136659
[11,] 0.02628613
[12,] 0.08712659
[13,] 0.02629415
[14,] 0.08711315
[15,] 0.04192542
[16,] 0.12420663
[17,] 0.01877911
[18,] 0.02631142
[19,] 0.02631142
[20,] 0.04192497
[21,] 0.02631496
[22,] 0.04192008
[23,] 0.04192008
[24,] 0.06756859
> print(scenarioThreeDefuzzified)
            [,1]
 [1,] 0.01757103
 [2,] 0.09411066
 [3,] 0.01737183
 [4,] 0.09379260
 [5,] 0.01737127
 [6,] 0.09379552
 [7,] 0.01881622
 [8,] 0.09793531
 [9,] 0.01737006
[10,] 0.09381254
[11,] 0.01881568
[12,] 0.09793577
[13,] 0.01881552
[14,] 0.09794335
[15,] 0.02144077
[16,] 0.10358946
[17,] 0.01823942
[18,] 0.01881485
[19,] 0.01881485
[20,] 0.02143724
[21,] 0.01881594
[22,] 0.02143550
[23,] 0.02143550
[24,] 0.02551192
> print(scenarioFourDefuzzified)
            [,1]
 [1,] 0.02600753
 [2,] 0.08522191
 [3,] 0.02556940
 [4,] 0.08469620
 [5,] 0.02556958
 [6,] 0.08470062
 [7,] 0.02925957
 [8,] 0.09508595
 [9,] 0.02557084
[10,] 0.08473044
[11,] 0.02926338
[12,] 0.09506420
[13,] 0.02926622
[14,] 0.09506850
[15,] 0.03593337
[16,] 0.10903364
[17,] 0.02773225
[18,] 0.02927230
[19,] 0.02927230
[20,] 0.03592767
[21,] 0.02927535
[22,] 0.03592272
[23,] 0.03592272
[24,] 0.04613821
> 
> scenarioOneRank = compareResults(scenarioOneDefuzzified)
> scenarioTwoRank = compareResults(scenarioTwoDefuzzified)
> scenarioThreeRank = compareResults(scenarioThreeDefuzzified)
> scenarioFourRank = compareResults(scenarioFourDefuzzified)
> 
> print(scenarioOneRank)
      [,1]
 [1,]   11
 [2,]    1
 [3,]   22
 [4,]    8
 [5,]   23
 [6,]    7
 [7,]   16
 [8,]    5
 [9,]   24
[10,]    6
[11,]   17
[12,]    4
[13,]   18
[14,]    3
[15,]   12
[16,]    2
[17,]   10
[18,]   20
[19,]   20
[20,]   13
[21,]   19
[22,]   14
[23,]   14
[24,]    9
> print(scenarioTwoRank)
      [,1]
 [1,]   24
 [2,]    9
 [3,]   23
 [4,]    6
 [5,]   22
 [6,]    8
 [7,]   19
 [8,]    2
 [9,]   21
[10,]    7
[11,]   18
[12,]    3
[13,]   17
[14,]    4
[15,]   10
[16,]    1
[17,]   20
[18,]   15
[19,]   15
[20,]   11
[21,]   14
[22,]   12
[23,]   12
[24,]    5
> print(scenarioThreeRank)
      [,1]
 [1,]   21
 [2,]    5
 [3,]   22
 [4,]    8
 [5,]   23
 [6,]    7
 [7,]   14
 [8,]    4
 [9,]   24
[10,]    6
[11,]   16
[12,]    3
[13,]   17
[14,]    2
[15,]   10
[16,]    1
[17,]   20
[18,]   18
[19,]   18
[20,]   11
[21,]   15
[22,]   12
[23,]   12
[24,]    9
> print(scenarioFourRank)
      [,1]
 [1,]   21
 [2,]    5
 [3,]   24
 [4,]    8
 [5,]   23
 [6,]    7
 [7,]   19
 [8,]    2
 [9,]   22
[10,]    6
[11,]   18
[12,]    4
[13,]   17
[14,]    3
[15,]   10
[16,]    1
[17,]   20
[18,]   15
[19,]   15
[20,]   11
[21,]   14
[22,]   12
[23,]   12
[24,]    9
> 
> #### Evaluation EXAMPLE ENDS HERE ####